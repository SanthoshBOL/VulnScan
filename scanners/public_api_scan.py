import requests
import os
from time import sleep
from fpdf import FPDF
from datetime import datetime

COVER_IMAGE_PATH = "assets/cover_api_scan.jpg"
DOMAINS_FILE = "data/gravty_domains.txt"

class PDFReport(FPDF):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.cover_page = True  # flag to identify if it's the cover page

    def header(self):
        if self.cover_page:
            return  # skip header on cover page
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, "Public API Unauthorized Access Report", ln=True, align='C')
        self.ln(5)

    def add_cover(self):
        self.cover_page = True
        self.add_page()
        self.image(COVER_IMAGE_PATH, x=10, y=20, w=190)
        # Removed title and date text from cover page
        self.cover_page = False  # reset for next pages


    def add_table(self, rows):
        self.add_page()
        self.set_font("Arial", "B", 12)
        col_widths = [30, 60, 20, 50, 70]
        headers = ["Method", "Endpoint", "Status", "Domain", "Summary"]

        for i, header in enumerate(headers):
            self.cell(col_widths[i], 10, header, border=1, align='C')
        self.ln()
        self.set_font("Arial", "", 10)

        for row in rows:
            cells = [
                str(row.get("Method", "")),
                str(row.get("Endpoint", "")),
                str(row.get("Status", "")),
                str(row.get("Domain", "")),
                str(row.get("Summary", ""))
            ]

            line_counts = [self.get_num_lines(col_widths[i], cells[i]) for i in range(len(cells))]
            max_lines = max(line_counts)
            row_height = 5 * max_lines

            if self.get_y() + row_height > self.page_break_trigger:
                self.add_page()
                self.set_font("Arial", "B", 12)
                for i, header in enumerate(headers):
                    self.cell(col_widths[i], 10, header, border=1, align='C')
                self.ln()
                self.set_font("Arial", "", 10)

            x_start = self.get_x()
            y_start = self.get_y()

            for i in range(len(cells)):
                self.set_xy(x_start + sum(col_widths[:i]), y_start)
                self.multi_cell(col_widths[i], 5, cells[i], border=1, align='L')
                actual_lines = self.get_num_lines(col_widths[i], cells[i])
                if actual_lines < max_lines:
                    for _ in range(max_lines - actual_lines):
                        self.cell(col_widths[i], 5, '', border='LR', ln=2)

            self.set_y(y_start + row_height)
            self.set_x(x_start)

        self.ln(5)
        self.set_font("Arial", "I", 10)
        self.cell(0, 10, f"Total Endpoints Tested: {len(rows)}", ln=True)
        self.cell(0, 10, "Generated by: Security Team", ln=True)
        self.cell(0, 10, f"Date: {datetime.now().strftime('%d-%m-%Y')}", ln=True)


    def get_num_lines(self, width, text):
        if not text:
            return 1
        return len(self.multi_cell(width, 5, text, split_only=True))


def load_lines(file_path):
    with open(file_path, 'r') as f:
        return [line.strip().strip('/') for line in f if line.strip() and not line.startswith("#")]

def test_unauth_access(domains, paths, methods, payload):
    log = []
    for domain in domains:
        base_url = f"https://{domain}"
        for path in paths:
            for method in methods:
                full_url = f"{base_url}/{path.lstrip('/')}"
                print(f"[*] Testing {method} {full_url}")
                try:
                    if method == "GET":
                        response = requests.get(full_url, timeout=10)
                    else:
                        response = requests.request(method, full_url, json=payload, timeout=10)

                    status = response.status_code
                    summary = (
                        "Publicly Accessible" if status in [200, 201]
                        else "Access Restricted" if status in [401, 403]
                        else f"Returned {status}"
                    )

                    log.append({
                        "Method": method,
                        "Endpoint": path,
                        "Status": status,
                        "Summary": summary,
                        "Domain": domain
                    })
                except requests.RequestException as e:
                    log.append({
                        "Method": method,
                        "Endpoint": path,
                        "Status": "ERR",
                        "Summary": str(e).split("\n")[0][:100] + "...",
                        "Domain": domain
                    })
                sleep(0.5)
    return log

def write_pdf_report(rows, output_pdf):
    pdf = PDFReport()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_cover()
    pdf.add_table(rows if rows else [{
        "Method": "-",
        "Endpoint": "-",
        "Status": "-",
        "Summary": "No unauthorized access detected.",
        "Domain": "-"
    }])
    os.makedirs(os.path.dirname(output_pdf), exist_ok=True)
    pdf.output(output_pdf, "F")
    print(f"[✓] PDF Report saved: {output_pdf}")

def run_public_api_scan(endpoints_file, output_pdf):
    HTTP_METHODS = ["GET", "POST", "PUT"]
    GENERIC_PAYLOAD = {"test": "unauth"}

    domains = load_lines(DOMAINS_FILE)
    endpoints = load_lines(endpoints_file)
    results = test_unauth_access(domains, endpoints, HTTP_METHODS, GENERIC_PAYLOAD)
    write_pdf_report(results, output_pdf)
    print("[✓] Public API scan completed.")
